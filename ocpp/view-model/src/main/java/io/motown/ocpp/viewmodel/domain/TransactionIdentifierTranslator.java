/**
 * Copyright (C) 2013 Motown.IO (info@motown.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.motown.ocpp.viewmodel.domain;

import io.motown.domain.api.chargingstation.ChargingStationId;

public class TransactionIdentifierTranslator {

    /**
     * Generates a string representation of the long based OCPP1.5 transactionId.
     * To create a unique represenation the chargingstationId, and protocol are included.
     *
     * @param chargingStationId the chargingstation identifier
     * @param transactionId the long based transaction identifier
     * @return String in the format [chargingstationId]_OCPP_[transactionId]
     */
    public static String toString(ChargingStationId chargingStationId, Long transactionId){
        return String.format("%s_OCPP_%s", chargingStationId.getId(), transactionId);
    }

    /**
     * Generates a string representation of the integer based OCPP1.5 transactionId.
     * To create a unique represenation the chargingstationId, and protocol are included.
     *
     * @param chargingStationId the chargingstation identifier
     * @param transactionId the int based transaction identifier
     * @return String in the format [chargingstationId]_OCPP_[transactionId]
     */
    public static String toString(ChargingStationId chargingStationId, int transactionId){
        return String.format("%s_OCPP_%s", chargingStationId.getId(), transactionId);
    }

    /**
     * Extracts the OCPP transaction identifier (integer) from the generated transaction identifier.
     *
     * @param transactionIdentifier transaction identifier as generated by {@code generateTransactionIdentifier}.
     * @return integer which represents the identifier used in the OCPP protocol
     */
    public static int toInt(String transactionIdentifier) {
        String[] split = transactionIdentifier.split("_");
        // databases usually uses 'Long' object type to define id's, OCPP expects integer, this should not be a problem
        return Integer.parseInt(split[split.length - 1]);
    }

}
