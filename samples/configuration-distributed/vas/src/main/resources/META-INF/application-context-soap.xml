<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2013 Motown.IO (info@motown.io)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:axon="http://www.axonframework.org/schema/core" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:axon-amqp="http://www.axonframework.org/schema/amqp"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
                           http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	                       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd http://www.axonframework.org/schema/amqp http://www.axonframework.org/schema/axon-amqp.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <context:component-scan base-package="io.motown.vas.viewmodel"/>

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

    <!-- Interceptor that adds the messageId if not present, as CXF requires the WS-Addressing messageId header to be present, while according to the spec this is only requierd when using the replyTo or faultTo WSA headers -->
    <bean id="headerInterceptor" class="io.motown.vas.v10.soap.interceptor.MessageIdHeaderInterceptor"/>

    <bean id="replyToInterceptor" class="io.motown.vas.v10.soap.interceptor.ReplyToHeaderInInterceptor"/>

    <bean class="io.motown.vas.viewmodel.VasEventHandler">
        <property name="chargingStationRepository" ref="chargingStationRepository" />
        <property name="configurationConversionService">
            <bean class="io.motown.vas.viewmodel.ConfigurationConversionService" />
        </property>
        <property name="subscriberService">
            <bean class="io.motown.vas.viewmodel.VasSubscriberService">
                <property name="subscriptionRepository" ref="subscriptionRepository" />
                <property name="executorService" ref="executorService" />
                <property name="subscriberClient" ref="vasSubscriberSoapClient" />
            </bean>
        </property>
    </bean>

    <bean id="vasSubscriberSoapClient" class="io.motown.vas.v10.soap.subscriber.VasSubscriberSoapClient">
        <property name="proxyFactory">
            <bean class="io.motown.vas.v10.soap.subscriber.VasSubscriberServiceProxyFactory" />
        </property>
        <property name="publisherIdentity" value="${io.motown.vas.v10.soap.publisher.identity}" />
    </bean>

    <bean id="vasPublisherService" class="io.motown.vas.v10.soap.publisher.MotownVasPublisherService">
        <property name="vasConversionService">
            <bean class="io.motown.vas.v10.soap.VasConversionService" />
        </property>
        <property name="chargingStationRepository" ref="chargingStationRepository" />
        <property name="subscriptionRepository" ref="subscriptionRepository" />
    </bean>

    <jaxws:endpoint implementor="#vasPublisherService"
                    address="/vasPublisherService">
        <jaxws:inInterceptors>
            <ref bean="replyToInterceptor"/>
        </jaxws:inInterceptors>
    </jaxws:endpoint>

    <!-- TODO what is this taskExecutor used for? Is it still in use? - Mark van den Bergh, Februari 21st 2014 -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>
    <context:property-placeholder location="classpath:config.properties, file:${io.motown.vas.v10.soap.config}"
                                  ignore-resource-not-found="true"
                                  ignore-unresolvable="true"/>

    <axon:annotation-config/>

    <context:component-scan base-package="io.motown.vas.v10.soap"/>

    <rabbit:connection-factory id="amqpConnection"
                               username="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.username}"
                               password="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.password}"
                               virtual-host="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.virtualhost}"
                               host="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.host}"/>

    <rabbit:admin id="amqpAdmin"
                  connection-factory="amqpConnection"/>

    <rabbit:queue id="queue"
                  name="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.queue.name}"
                  durable="true"/>

    <rabbit:queue id="vasRequestsQueue"
                  name="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.vas.queue.name}"
                  exclusive="false"/>

    <rabbit:direct-exchange id="vasExchange"
                            name="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.exchange.events.vas.name}"
                            durable="true">
        <rabbit:bindings>
            <rabbit:binding queue="vasRequestsQueue" key="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.routing.key}"/>
            <rabbit:binding exchange="eventsExchange"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <rabbit:fanout-exchange id="eventsExchange"
                            name="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.exchange.events.name}"
                            durable="true">
        <rabbit:bindings>
            <rabbit:binding queue="queue"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <axon:event-bus id="eventBus" terminal="terminal"/>

    <axon-amqp:terminal id="terminal"
                        connection-factory="amqpConnection"
                        serializer="serializer"
                        exchange-name="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.exchange.events.name}">
        <axon-amqp:default-configuration exclusive="true"/>
    </axon-amqp:terminal>

    <axon:jpa-event-store id="eventStore" />

    <axon:cluster id="eventCluster" default="true">
        <axon:selectors>
            <axon:class-name-matches pattern="io.motown.vas.viewmodel.VasEventHandler"/>
        </axon:selectors>
        <axon:replay-config event-store="eventStore"/>
        <axon:meta-data>
            <entry key="AMQP.Config">
                <axon-amqp:configuration queue-name="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.queue.name}"/>
            </entry>
        </axon:meta-data>
    </axon:cluster>

    <axon:cluster id="vasRequestCluster">
        <axon:selectors>
            <axon:class-name-matches pattern="io.motown.vas.viewmodel.Vas10RequestHandler"/>
        </axon:selectors>
        <axon:meta-data>
            <entry key="AMQP.Config">
                <!--
                TODO: Apply some sort of retry mechanism upon failures. For now acknowledge is set to none, which results in auto-ack behaviour (even upon exceptions) to avoid never ending processing loop on exceptions
                -->
                <axon-amqp:configuration queue-name="${io.motown.vas.v10.soap.eventbus.amqp.rabbit.vas.queue.name}"
                                         exclusive="false"
                                         acknowledge="none"/>
            </entry>
        </axon:meta-data>
    </axon:cluster>

    <context:property-placeholder location="classpath:configViewModel.properties"
                                  ignore-resource-not-found="true"
                                  ignore-unresolvable="true"/>

    <context:component-scan base-package="io.motown.vas.viewmodel"/>

    <!--
    <bean id="domainCommandGateway" class="org.axonframework.commandhandling.gateway.CommandGatewayFactoryBean">
        <property name="commandBus" ref="commandBus"/>
        <property name="gatewayInterface" value="io.motown.vas.viewmodel.domain.DomainCommandGateway"/>
    </bean>
    -->

    <!--
    <bean id="configurationCommandGateway" class="org.axonframework.commandhandling.gateway.CommandGatewayFactoryBean">
        <property name="commandBus" ref="commandBus"/>
        <property name="gatewayInterface" value="io.motown.vas.viewmodel.configuration.ConfigurationCommandGateway"/>
    </bean>
    -->

    <bean id="beanValidationInterceptor" class="org.axonframework.commandhandling.interceptors.BeanValidationInterceptor"/>

    <bean id="commandBus"
          class="org.axonframework.commandhandling.distributed.DistributedCommandBus">
        <constructor-arg ref="jgroupsConnector"/>
        <property name="CommandDispatchInterceptors" ref="beanValidationInterceptor"/>
    </bean>

    <bean id="jgroupsConnector"
          class="org.axonframework.commandhandling.distributed.jgroups.JGroupsConnectorFactoryBean">
        <property name="configuration"
                  value="flush-udp.xml"/>
        <property name="clusterName"
                  value="io.motown.commands"/>
        <property name="localSegment">
            <axon:command-bus/>
        </property>
        <property name="serializer">
            <bean class="org.axonframework.serializer.xml.XStreamSerializer"/>
        </property>
    </bean>

    <bean id="asyncExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
        <property name="corePoolSize" value="1"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
    </bean>

    <bean id="serializer" class="org.axonframework.serializer.xml.XStreamSerializer"/>

    <!-- Spring Data JPA -->

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="io.motown.vas.viewmodel.model"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="HSQL"/>
                <property name="generateDdl" value="true"/>
            </bean>
        </property>
    </bean>

    <jpa:repositories base-package="io.motown.vas.viewmodel.persistence.repostories" />

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <jdbc:embedded-database id="dataSource" type="HSQL" />

    <!-- executorService for pushing status changes to subscribers -->
    <bean id="executorService" class="java.util.concurrent.Executors"
          factory-method="newCachedThreadPool"
          destroy-method="shutdownNow" />

</beans>
