<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:axon="http://www.axonframework.org/schema/core"
       xmlns:axon-amqp="http://www.axonframework.org/schema/amqp"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.axonframework.org/schema/amqp http://www.axonframework.org/schema/axon-amqp-2.0.xsd
                           http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core-2.0.xsd
                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
                           http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd">

    <axon:annotation-config/>

    <context:property-placeholder location="classpath:config.properties, file:${io.motown.domain.app.config}"
                                  ignore-resource-not-found="true"/>

    <axon:event-bus id="eventBus"
                    terminal="terminal"/>

    <context:component-scan base-package="io.motown.domain.chargingstation"/>

    <bean id="commandBus"
          class="org.axonframework.commandhandling.distributed.DistributedCommandBus">
        <constructor-arg ref="jgroupsConnector"/>
    </bean>

    <!-- Begin configuration of JPA EventStore -->

    <axon:jpa-event-store id="eventStore"
                          data-source="dataSource"/>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName"
                  value="${jdbc.driverclass}"/>
        <property name="url"
                  value="${jdbc.url}"/>
        <property name="username"
                  value="${jdbc.username}"/>
        <property name="password"
                  value="${jdbc.password}"/>
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource"
                  ref="dataSource"/>
        <property name="packagesToScan"
                  value="org.axonframework.eventstore.jpa"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database"
                          value="HSQL"/>
                <property name="generateDdl"
                          value="true"/>
            </bean>
        </property>
    </bean>

    <bean id="commandTransactionManager"
          class="org.axonframework.unitofwork.SpringTransactionManager">
        <constructor-arg>
            <bean class="org.springframework.orm.jpa.JpaTransactionManager">
                <property name="entityManagerFactory"
                          ref="entityManagerFactory"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- End configuration of JPA EventStore -->

    <axon:snapshotter id="snapshotter"
                      event-store="eventStore"
                      executor="taskExecutor"/>

    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize"
                  value="${io.motown.domain.app.eventstore.snapshotter.executor.pool.size}"/>
        <property name="maxPoolSize"
                  value="${io.motown.domain.app.eventstore.snapshotter.executor.pool.size.max}"/>
        <property name="waitForTasksToCompleteOnShutdown"
                  value="true"/>
    </bean>

    <bean id="cacheAdapter" class="org.axonframework.cache.EhCacheAdapter">
        <constructor-arg ref="cache">
        </constructor-arg>
    </bean>

    <bean id="cache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheName" value="testCache"/>
    </bean>

    <bean id="serializer"
          class="org.axonframework.serializer.xml.XStreamSerializer"/>

    <bean id="jgroupsConnector"
          class="org.axonframework.commandhandling.distributed.jgroups.JGroupsConnectorFactoryBean">
        <property name="configuration"
                  value="${io.motown.domain.app.commandbus.jgroups.configuration}"/>
        <property name="clusterName"
                  value="${io.motown.domain.app.commandbus.jgroups.cluster.name}"/>
        <property name="serializer"
                  ref="serializer"/>
        <property name="localSegment">
            <bean class="org.axonframework.commandhandling.SimpleCommandBus">
                <property name="transactionManager" ref="commandTransactionManager"/>
                <property name="handlerInterceptors">
                    <list>
                        <bean class="io.motown.domain.app.axon.CorrelationCommandHandlerInterceptor"/>
                        <bean class="org.axonframework.commandhandling.interceptors.LoggingInterceptor"/>
                    </list>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="routingKeyResolver"
          class="io.motown.domain.app.axon.MotownRoutingKeyResolver"/>

    <axon-amqp:terminal id="terminal"
                        connection-factory="amqpConnection"
                        serializer="serializer"
                        exchange-name="${io.motown.domain.app.eventbus.amqp.rabbit.exchange.name}"
                        routing-key-resolver="routingKeyResolver"/>

    <rabbit:connection-factory id="amqpConnection"
                               host="${io.motown.domain.app.eventbus.amqp.rabbit.host}"
                               username="${io.motown.domain.app.eventbus.amqp.rabbit.username}"
                               password="${io.motown.domain.app.eventbus.amqp.rabbit.password}"
                               virtual-host="${io.motown.domain.app.eventbus.amqp.rabbit.virtualhost}"/>

    <rabbit:admin id="amqpAdmin"
                  connection-factory="amqpConnection"/>

    <rabbit:fanout-exchange id="exchange"
                            name="${io.motown.domain.app.eventbus.amqp.rabbit.exchange.name}"
                            durable="true"/>

    <axon:aggregate-command-handler aggregate-type="io.motown.domain.chargingstation.ChargingStation"
                                    repository="chargingStationRepository"
                                    command-bus="commandBus"/>

    <axon:event-sourcing-repository id="chargingStationRepository"
                                    aggregate-type="io.motown.domain.chargingstation.ChargingStation"
                                    cache-ref="cacheAdapter"
                                    event-bus="eventBus"
                                    event-store="eventStore">
        <axon:snapshotter-trigger event-count-threshold="50" snapshotter-ref="snapshotter"/>
    </axon:event-sourcing-repository>

</beans>
