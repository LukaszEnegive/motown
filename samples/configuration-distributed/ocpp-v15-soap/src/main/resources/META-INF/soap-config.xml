<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2013 Motown.IO (info@motown.io)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:axon="http://www.axonframework.org/schema/core"
       xmlns:axon-amqp="http://www.axonframework.org/schema/amqp"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd
                           http://www.axonframework.org/schema/amqp http://www.axonframework.org/schema/axon-amqp.xsd
                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <context:property-placeholder location="classpath:config.properties, file:${io.motown.ocpp.v15.soap.config}"
                                  ignore-resource-not-found="true"
                                  ignore-unresolvable="true"/>

    <axon:annotation-config/>

    <rabbit:connection-factory id="amqpConnection"
                               username="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.username}"
                               password="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.password}"
                               virtual-host="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.virtualhost}"
                               host="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.host}"/>

    <rabbit:admin id="amqpAdmin"
                  connection-factory="amqpConnection"/>

    <rabbit:queue id="queue"
                  name="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.queue.name}"
                  durable="true"/>

    <rabbit:queue id="ocppRequestsQueue"
                  name="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.ocpp.queue.name}"
                  exclusive="false"/>

    <!--
    TODO: Determine how to cope with requests for chargingstations that are (temporarily) offline/not available. This
    now results in a continuous retry loop, since the request handling fails with an exception that will reschedules
    the event (max number of retries, dead letter exchange, etc) - Ingo Pak, 03 Jan 2014
    -->

    <rabbit:fanout-exchange id="eventsExchange"
                            name="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.exchange.events.name}"
                            durable="true">
        <rabbit:bindings>
            <rabbit:binding queue="queue"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <rabbit:direct-exchange id="ocppExchange"
                            name="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.exchange.events.ocpp.name}"
                            durable="true">
        <rabbit:bindings>
            <rabbit:binding queue="ocppRequestsQueue"
                            key="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.routing.key.base}.${io.motown.ocpp.v15.soap.protocol.identifier}"/>
            <rabbit:binding exchange="eventsExchange"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <axon:event-bus id="eventBus" terminal="terminal"/>

    <bean id="eventWaitingGateway" class="io.motown.domain.utils.axon.EventWaitingGateway">
        <property name="commandBus" ref="commandBus"/>
        <property name="eventBus" ref="eventBus"/>
    </bean>

    <axon-amqp:terminal id="terminal"
                        connection-factory="amqpConnection"
                        serializer="serializer"
                        exchange-name="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.exchange.events.name}">
        <axon-amqp:default-configuration exclusive="true"/>
    </axon-amqp:terminal>

    <axon:jpa-event-store id="eventStore"/>

    <axon:cluster id="eventCluster" default="true">
        <axon:selectors>
            <axon:class-name-matches pattern="io.motown.ocpp.viewmodel.OcppEventHandler"/>
        </axon:selectors>
        <axon:replay-config event-store="eventStore"/>
        <axon:meta-data>
            <entry key="AMQP.Config">
                <axon-amqp:configuration queue-name="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.queue.name}"/>
            </entry>
        </axon:meta-data>
    </axon:cluster>

    <axon:cluster id="ocppRequestCluster">
        <axon:selectors>
            <axon:class-name-matches pattern="io.motown.ocpp.v15.soap.Ocpp15RequestHandler"/>
        </axon:selectors>
        <axon:meta-data>
            <entry key="AMQP.Config">
                <!--
                TODO: Apply some sort of retry mechanism upon failures. For now acknowledge is set to none, which results in auto-ack behaviour (even upon exceptions) to avoid never ending processing loop on exceptions
                -->
                <axon-amqp:configuration queue-name="${io.motown.ocpp.v15.soap.eventbus.amqp.rabbit.ocpp.queue.name}"
                                         exclusive="false"
                                         acknowledge="none"/>
            </entry>
        </axon:meta-data>
    </axon:cluster>

</beans>
